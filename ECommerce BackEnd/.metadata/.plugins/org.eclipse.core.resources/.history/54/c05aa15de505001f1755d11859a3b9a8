package com.pack.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.pack.entities.User;
import com.pack.repository.UserRepository;
import com.pack.services.UserService;

@CrossOrigin("*")
@RestController
@RequestMapping("/users")
public class UserController {

	@Autowired
	private UserService userService;
	
	@Autowired
	private UserRepository userRepo;

	@PostMapping("/save")
	public ResponseEntity<User> saveUser(@RequestBody User user) {

		User data = userService.saveUser(user);

		return new ResponseEntity<User>(data, HttpStatus.CREATED);

	}

	@GetMapping("/all")
	public ResponseEntity<List<User>> saveUser() {

		List<User> data = userService.getAllUsers();

		return new ResponseEntity<>(data, HttpStatus.CREATED);

	}
	
	@GetMapping("{id}")
	public ResponseEntity<User> getUserById(@PathVariable(name = "id") Long id) {

		User data = userService.getUserById(id);

		return new ResponseEntity<>(data, HttpStatus.CREATED);

	}
	
	@PutMapping("{id}")
	public ResponseEntity<User> updateUser(@PathVariable(name = "id") Long id ,@RequestBody  User user) {

		User data = userService.updateUser(id, user);
		System.out.println(data);

		if (data != null) {
			return new ResponseEntity<>(data, HttpStatus.OK);
		} else {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
		 

	}
	
	@DeleteMapping("{id}")
	public ResponseEntity<String> deleteUser(@PathVariable(name = "id") Long id) {

		String data = userService.deleteUser(id);
		
	    
		
		return new ResponseEntity<>(data, HttpStatus.OK);

	}
	
	
	@GetMapping("/signIn")
	public ResponseEntity<User>signIn(@RequestBody User user ){
//		User data=userService.getUserById(id);
		 
		Optional<User> data=userRepo.findUserByEmail(user.getEmail());
		
		System.out.println("ID: "+data);
		
		 
		
		return new ResponseEntity<>(data, HttpStatus.OK);
	}
	
	

}
