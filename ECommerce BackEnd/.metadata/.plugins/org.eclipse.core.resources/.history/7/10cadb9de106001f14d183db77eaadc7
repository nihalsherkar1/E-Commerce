package com.pack.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

@Configuration 
@EnableMethodSecurity
public class SecurityConfig  {
	
	@Bean
	public BCryptPasswordEncoder encoder() {
		return  new BCryptPasswordEncoder();
	}
	
	@Bean
	public UserDetailsService userDetailsService() {
 
		return new CustomUserDetailService();
		
	}
	

	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http)throws Exception{
		http.csrf().disable()
        .authorizeRequests()
            .antMatchers("/user/register").permitAll() // Allow registration without authentication
            .anyRequest().authenticated() // All other requests require authentication
        .and()
        .formLogin(); // Use form-based login

    return http.build();
		
		
	}
	 
	
}
