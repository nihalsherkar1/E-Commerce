package com.pack.config;

import java.util.Arrays;
import java.util.Collections;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;

import jakarta.servlet.http.HttpServletRequest;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

	 @Bean
	    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
	        
	        http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
	       .and()
	       .authorizeHttpRequests(Authorize -> Authorize
	               .requestMatchers("/api/admin/**").hasRole("ADMIN")
	               .requestMatchers("/api/user/**").hasRole("USER")
	               .anyRequest().permitAll()
	                )
	       .csrf().disable()
	       .cors().configurationSource(new CorsConfigurationSource() {
	                    
	                    @Override
	                    public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {
	                        
	                        CorsConfiguration cfg = new CorsConfiguration();
	                        
	                        cfg.setAllowedOrigins(Arrays.asList(
	                                "http://localhost:3000", 
	                                "http://localhost:4000",
	                                "http://localhost:4200",
	                                "https://shopwithzosh.vercel.app"
	                            )
	                        );
	                        //cfg.setAllowedMethods(Arrays.asList("GET", "POST","DELETE","PUT"));
	                        cfg.setAllowedMethods(Collections.singletonList("*"));
	                        cfg.setAllowCredentials(true);
	                        cfg.setAllowedHeaders(Collections.singletonList("*"));
	                        cfg.setExposedHeaders(Arrays.asList("Authorization"));
	                        cfg.setMaxAge(3600L);
	                        return cfg;
	                        
	                    }
	                })
	       .and()
	       .httpBasic()
	       .and()
	       .formLogin();
	        
	        return http.build();
	        
	    }
	    
	    @Bean
	    public PasswordEncoder passwordEncoder() {
	        return new BCryptPasswordEncoder();
	    }
	    
	    @Bean
	    public UserDetailsService userDetailsService() {
	        return new UserDetailsService() {
	            
	            @Override
	            public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
	                // Load user from database or other authentication source
	                // For demonstration purposes, we'll use a simple in-memory user store
	                if (username.equals("admin")) {
	                    return new User("admin", "password", getAuthorities("ADMIN"));
	                } else if (username.equals("user")) {
	                    return new User("user", "password", getAuthorities("USER"));
	                } else {
	                    throw new UsernameNotFoundException("User not found");
	                }
	            }
	            
	            private List<GrantedAuthority> getAuthorities(String role) {
	                List<GrantedAuthority> authorities = new ArrayList<>();
	                authorities.add(new SimpleGrantedAuthority(role));
	                return authorities;
	            }
	        };
	    }
	
}
